{"version":3,"sources":["utils/validate.js","utils/createErrorMessage.js","components/SignupLoginForm.js","components/Footer.js","components/LoginCard.js","components/SignupCard.js","components/Reset.js","components/ResetCard.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["emailRegex","module","exports","type","value","test","length","createErrorMessage","updatedErrors","errorMessages","email","password","validate","require","SignupLoginForm","props","useState","setEmail","setPassword","errors","setErrors","handleChange","ev","persist","target","validateForm","valid","i","name","displayErrorMessage","error","Form","Text","className","displayText","path","Container","noValidate","onSubmit","preventDefault","alert","Group","Label","Control","placeholder","onChange","required","Button","variant","Footer","to","displayLinks","LoginCard","match","SignupCard","Reset","ResetCard","Header","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c74606b9.chunk.js","sourcesContent":["// regular expression matches from beginning to end, a string beginning with any number of nums and digits, followed by @symbol, another string of only letters, a dot, and three letters for the domain name. \n// No, this won't account for .io, .tw, etc.\n\nconst emailRegex = /^\\w+@[a-z]+.[a-z]{3}$/\n\nconst validate = (type, value) => {\n  switch(type) {\n    case 'email':\n      return emailRegex.test(value);\n    case 'password':\n      return value.length < 8 ? false : true;\n    default:\n  }\n}\n\nmodule.exports = validate;","const createErrorMessage = (type, updatedErrors) => {\n  const errorMessages = {\n    email: 'Please enter a valid email',\n    password: 'Please enter a password with at least 8 characters'\n  }\n\n  switch(type) {\n    case 'email':\n      return {...updatedErrors, email: errorMessages.email};\n    case 'password':\n      return {...updatedErrors, password: errorMessages.password};\n    default:\n  }\n}\n\nexport default createErrorMessage;","import React, {useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport createErrorMessage from '../utils/createErrorMessage';\nconst validate = require('../utils/validate');\n\nconst SignupLoginForm = props => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({email: '', password: ''});\n\n  const handleChange = ev => {\n    ev.persist();\n    const {type, value} = ev.target;\n    switch (type) {\n      case \"email\": \n        setEmail(value);\n        break;\n      case \"password\": \n        setPassword(value)\n        break;\n      default:\n    } \n  }\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    ev.persist();\n    if (validateForm(ev) === true) {\n      alert('logged in!')\n    } else { \n      return null;\n    }\n  }\n  \n  const validateForm = ev => {\n    let valid = true;\n    let updatedErrors = {email: '', password: ''}\n    for (let i = 0; i < 2; i++) {\n      const [type, value] = [ev.target[i].name, ev.target[i].value]\n      if (validate(type, value) === false) {\n        valid = false;\n        updatedErrors = createErrorMessage(type, updatedErrors);\n      }\n    }\n    setErrors(updatedErrors);\n    return valid;\n  }\n  \n  const displayErrorMessage = error => {\n    return (\n      <Form.Text className=\"text-muted\">\n        {error}\n      </Form.Text>\n    )\n  }\n\n  const displayText = path => {\n    switch(path) {\n      case '/login':\n        return 'Log In';\n      case '/signup':\n        return 'Sign Up';\n      default:\n    }\n  }\n\n  return (\n    <Container>\n      <h2>{displayText(props.path)}</h2>\n      <Form noValidate onSubmit={handleSubmit} className=\"form\">\n        <Form.Group>\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control type='email' name='email' value={email} placeholder='Email' onChange={ev => handleChange(ev)} required />\n          {displayErrorMessage(errors.email)}\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Password</Form.Label>\n          <Form.Control type='password' name='password' value={password} placeholder='Password' onChange={ev => handleChange(ev)} required />\n          {displayErrorMessage(errors.password)}\n        </Form.Group>\n        <Button variant='light' type='submit' value='submit'>{displayText(props.path)}</Button>\n      </Form>\n    </Container>\n  )\n}\n\nexport default SignupLoginForm;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\n\nconst Footer = props => {\n\n  const displayLinks = path => {\n    switch (path) {\n      case '/login':\n        return (\n          <>\n            <p><Link to='/reset'>Reset Password</Link> | <Link to='/signup'>Sign Up</Link></p>\n          </>\n        )\n      case '/signup':\n        return (\n          <>\n            <p><Link to='/reset'>Reset Password</Link> | <Link to='/login'>Login</Link></p>\n          </>\n        )\n      case '/reset':\n        return (\n          <>\n            <p><Link to='/login'>Login</Link> | <Link to='/signup'>Sign Up</Link></p>\n          </>\n        )\n      default:\n    }\n  }\n\n  return (\n    <Container className=\"footer\">\n      {displayLinks(props.path)}\n    </Container>\n  )\n}\n\nexport default Footer;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport SignupLoginForm from './SignupLoginForm';\nimport Footer from './Footer';\n\nexport const LoginCard = props => {\n  return (\n    <Container className=\"card\">\n      <SignupLoginForm path={props.match.path} />\n      <Footer path={props.match.path} />\n    </Container>\n  )\n}\n\nexport default LoginCard;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Footer from './Footer';\nimport SignupLoginForm from './SignupLoginForm';\n\nexport const SignupCard = props => {\n  return (\n    <Container className=\"card\">\n      <SignupLoginForm path={props.match.path} />\n      <Footer path={props.match.path} />\n    </Container>\n  )\n}\n\nexport default SignupCard;","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst Reset = () => {\n  return (\n    <>\n      <h2>Reset Password</h2>\n      <Form>\n        <Form.Group>\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control type='email' name='email' placeholder='Email' required />\n          <Form.Text>We'll send you an email to reset your password.</Form.Text>\n        </Form.Group>\n        <Button variant='light' type='submit' value='submit'>Reset Password</Button>\n      </Form>\n    </>\n  )\n}\n\nexport default Reset;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Reset from './Reset';\nimport Footer from './Footer';\n\nconst ResetCard = props => {\n  return (\n    <Container className=\"card\">\n      <Reset />\n      <Footer path={props.match.path} />\n    </Container>\n  )\n}\n\nexport default ResetCard;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => {\n  return (\n    <>\n      <Link to='/'><h1>HomeBinder</h1></Link>\n    </>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container'\nimport LoginCard from './components/LoginCard';\nimport SignupCard from './components/SignupCard';\nimport ResetCard from './components/ResetCard';\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <Container className=\"app\">\n      <Header />\n\n      {/* Routes */}\n      <Switch>\n        <Route exact path='/login' component={LoginCard} />\n        <Route exact path='/signup' component={SignupCard} />\n        <Route exact path='/reset' component={ResetCard} />\n        <Route path='/'>\n          <Redirect to='/login' />\n        </Route>\n      </Switch>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}