{"version":3,"sources":["utils/validate.js","utils/displayLinks.js","components/CardLayout.js","components/Reset.js","utils/createErrorMessage.js","utils/displayErrorMessage.js","utils/displayFormHeader.js","components/Login.js","utils/displayForm.js","components/FormCard.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["emailRegex","module","exports","type","value","test","length","resetLink","to","signupLink","loginLink","displayLinks","path","CardLayout","props","Container","className","children","Reset","Form","Group","Label","Control","name","placeholder","required","Text","Button","variant","createErrorMessage","updatedErrors","errorMessages","email","password","displayErrorMessage","error","displayFormHeader","validate","require","Login","useState","setEmail","setPassword","errors","setErrors","handleChange","ev","persist","target","validateForm","valid","i","noValidate","onSubmit","preventDefault","window","location","href","onChange","displayForm","FormCard","match","Header","App","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a5efab.chunk.js","sourcesContent":["// regular expression matches from beginning to end, a string beginning with any number of nums and digits, followed by @symbol, another string of only letters, a dot, and three letters for the domain name. \n// No, this won't account for .io, .tw, etc.\n\nconst emailRegex = /^\\w+@[a-z]+.[a-z]{3}$/\n\nconst validate = (type, value) => {\n  // both cases return a boolean\n  switch(type) {\n    case 'email':\n      // does the input match the regex requirements?\n      return emailRegex.test(value);\n    case 'password':\n      // is the password at least 8 characters?\n      return value.length < 8 ? false : true;\n    default:\n  }\n}\n\nmodule.exports = validate;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst resetLink = <Link to='/reset'>Reset Password</Link>\nconst signupLink = <Link to='/signup'>Signup</Link>\nconst loginLink = <Link to='/login'>Login</Link>\n\nconst displayLinks = path => {\n  switch (path) {\n    case '/login':\n      return (\n        <>{resetLink} | {signupLink}</>\n      )\n    case '/signup':\n      return (\n        <>{resetLink} | {loginLink}</>\n      )\n    case '/reset':\n      return (\n        <>{loginLink} | {signupLink}</>\n      )\n    default:\n  }\n}\n\nexport default displayLinks;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport displayLinks from '../utils/displayLinks';\n\nconst CardLayout = props => {\n  return (\n    <Container className=\"form-card\">\n      {props.children}\n      <div className=\"links\">\n        <p>{displayLinks(props.path)}</p>\n      </div>\n    </Container>\n  )\n}\n\nexport default CardLayout;","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst Reset = () => {\n  return (\n    <>\n      <h2>Reset Password</h2>\n      <Form>\n        <Form.Group>\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control type='email' name='email' placeholder='Email' required />\n          <Form.Text>We'll send you an email to reset your password.</Form.Text>\n        </Form.Group>\n        <div className=\"button-bar\">\n          <Button variant='light' type='submit' value='submit'>Reset Password</Button>\n        </div>\n      </Form>\n    </>\n  )\n}\n\nexport default Reset;","const createErrorMessage = (type, updatedErrors) => {\n  const errorMessages = {\n    email: 'Please enter a valid email',\n    password: 'Please enter a password with at least 8 characters'\n  }\n  // both cases return an object with respective error messages\n  switch(type) {\n    case 'email':\n      return {...updatedErrors, email: errorMessages.email};\n    case 'password':\n      return {...updatedErrors, password: errorMessages.password};\n    default:\n  }\n}\n\nexport default createErrorMessage;","import React from 'react';\nimport Form from 'react-bootstrap/Form'\n\n// displays message if there is a message to display\nconst displayErrorMessage = error => {\n  return (\n    <Form.Text className=\"text-muted\">\n      {error}\n    </Form.Text>\n  )\n}\n\nexport default displayErrorMessage;","const displayFormHeader = path => {\n  switch(path) {\n    case '/login':\n      return 'Log In';\n    case '/signup':\n      return 'Sign Up';\n    default:\n  }\n}\n\nexport default displayFormHeader;","import React, {useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport createErrorMessage from '../utils/createErrorMessage';\nimport displayErrorMessage from '../utils/displayErrorMessage';\nimport displayFormHeader from '../utils/displayFormHeader';\n\nconst validate = require('../utils/validate');\n\nconst Login = props => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({email: '', password: ''});\n\n  const handleChange = ev => {\n    ev.persist();\n    const {type, value} = ev.target;\n    switch (type) {\n      case \"email\": \n        setEmail(value);\n        break;\n      case \"password\": \n        setPassword(value)\n        break;\n      default:\n    } \n  }\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    ev.persist();\n    if (validateForm(ev) === true) {\n      window.location.href = 'homebinder.com'\n    } else {\n      return null;\n    }\n  }\n  \n  const validateForm = ev => {\n    // assumes form is valid, until it isn't.\n    // assumes there are no error messages, when invalidated, will add messages\n    let valid = true;\n    let updatedErrors = {email: '', password: ''}\n    // iterate through form names and values, and validate each input\n    // if input is invalidated, create error message and update errors\n    for (let i = 0; i < 2; i++) {\n      const [type, value] = [ev.target[i].name, ev.target[i].value]\n      if (validate(type, value) === false) {\n        valid = false;\n        updatedErrors = createErrorMessage(type, updatedErrors);\n      }\n    }\n    setErrors(updatedErrors);\n    return valid;\n  }\n\n  return (\n    <Container>\n      <h2>{displayFormHeader(props.path)}</h2>\n      <Form noValidate onSubmit={handleSubmit} className=\"form\">\n        <Form.Group>\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control type='email' name='email' value={email} placeholder='Email' onChange={ev => handleChange(ev)} required />\n          {displayErrorMessage(errors.email)}\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Password</Form.Label>\n          <Form.Control type='password' name='password' value={password} placeholder='Password' onChange={ev => handleChange(ev)} required />\n          {displayErrorMessage(errors.password)}\n        </Form.Group>\n        <div className=\"button-bar\">\n          <Button variant='light' type='submit' value='submit'>{displayFormHeader(props.path)}</Button>\n        </div>\n      </Form>\n    </Container>\n  )\n}\n\nexport default Login;","import React from 'react';\nimport Reset from '../components/Reset';\nimport Login from '../components/Login';\n\nconst displayForm = path => path === '/reset' ? <Reset /> : <Login path={path}/>\n\n\nexport default displayForm;","import React from 'react';\nimport CardLayout from './CardLayout';\nimport displayForm from '../utils/displayForm';\n\nexport const FormCard = props => {\n  const path = props.match.path;\n\n  return (\n    <CardLayout path={path} >\n      {displayForm(path)}\n    </CardLayout>\n  )\n}\n\nexport default FormCard;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => <Link to='/'><h1>HomeBinder</h1></Link>\n\nexport default Header;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container'\nimport FormCard from './components/FormCard';\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <Container className=\"app\">\n      <Header />\n\n      {/* Routes */}\n      <Switch>\n        <Route exact path='/login' component={FormCard} />\n        <Route exact path='/signup' component={FormCard} />\n        <Route exact path='/reset' component={FormCard} />\n        <Route path='/'>\n          <Redirect to='/login' />\n        </Route>\n      </Switch>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}